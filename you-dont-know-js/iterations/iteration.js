// –ò—Ç–µ—Ä–∞—Ç–æ—Ä —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
// –£ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ next(), next() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞ { value, done }.
// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑—å–º—ë–º —Ü–∏–∫–ª
const fruits = ["üçé", "üçå", "üçä"];
// –ü—Ä–∏–º–µ–Ω–∏–º –∫ –Ω–µ–º—É —Ü–∏–∫–ª for of
for (const fruit of fruits) {
	console.log(fruit); // üçé, –∑–∞—Ç–µ–º üçå, –∑–∞—Ç–µ–º üçä
}
// for of –≤—ã–∑—ã–≤–∞–µ—Ç fruits[Symbol.iterator]()

// –Ω–µ–º–Ω–æ–≥–æ –æ [Symbol.iterator](). –≠—Ç–æ –º–µ—Ç–æ–¥, –≤—ã–∑–æ–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä
const arr = [1, 2, 3];
// –°–æ–∑–¥–∞—ë–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä. –û–Ω –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —á—Ç–æ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
const iterator = arr[Symbol.iterator]();
console.log("iterator", iterator);
// –ó–∞—Ç–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –º–µ—Ç–æ–¥ next, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç done: true

// –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ next(). –ò—Ç–µ—Ä–∞—Ç–æ—Ä –±–µ—Ä—ë—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ (1) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç {value: 1, done false}
console.log(iterator.next());
// –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ next(). –ò—Ç–µ—Ä–∞—Ç–æ—Ä –±–µ—Ä—ë—Ç –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ (2) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç {value: 2, done false}
console.log(iterator.next());
// –¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ next(). –ò—Ç–µ—Ä–∞—Ç–æ—Ä –±–µ—Ä—ë—Ç —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ (3) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç {value: 3, done false}
console.log(iterator.next());
// –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –≤—ã–∑–æ–≤ next(). –¢–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å –≤–µ—Ä–Ω—ë—Ç {value: undefined, done: true}
console.log(iterator.next());

// –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã –¥–∞—é—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –≤–æ–∑–º–æ–∂–Ω—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –æ—Ç–ª–∏—á—á–∏ –æ—Ç –æ–±—ã—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—è –∏—Ö –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ. –° for —Ç–∞–∫–æ–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç. –û–Ω —Ç—Ä–µ–±—É–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –∑–Ω–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã.

// –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è JS. –û–Ω–∏ –ª–µ–∂–∞—Ç –≤ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —è–∑—ã–∫–∞.

// Spread –æ–ø—Ä–µ–∞—Ç–æ—Ä. –ü—Ä–∏–º–µ—Ä —Å–æ —Å—Ç—Ä–æ–∫–æ–π
const arr1 = [..."hello"]; // String ‚Üí –ò—Ç–µ—Ä–∞—Ç–æ—Ä ‚Üí –ú–∞—Å—Å–∏–≤
console.log(arr); // ['h', 'e', 'l', 'l', 'o']
// –í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
const str = "hello";
const iterator1 = str[Symbol.iterator](); // –ü–æ–ª—É—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏
const arr2 = [];
let result = iterator1.next();
while (!result.done) {
	arr.push(result.value); // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –º–∞—Å—Å–∏–≤
	result = iterator1.next(); // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª
}

// Rest –æ–ø–µ—Ä–∞—Ç–æ—Ä. –ü—Ä–∏–º–µ—Ä —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏
function sum(...nums) {
	// –ò—Ç–µ—Ä–∞—Ç–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	return nums.reduce((a, b) => a + b);
}
// –¢–æ–∂–µ —Å–∞–º–æ–µ –Ω–æ —Å –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
function sum() {
	// –ü–æ–ª—É—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è arguments (–ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤)
	const iterator = arguments[Symbol.iterator]();
	const nums = [];
	let result = iterator.next(); // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
	// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é next()
	while (!result.done) {
		nums.push(result.value); // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤
		result = iterator.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
	}
	return nums.reduce((a, b) => a + b); // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
}
// Array.from(). –° –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º —Å—Ç—Ä–æ–∫–∏
Array.from("abc"); // ['a', 'b', 'c']
const str3 = "abc";
const iterator3 = str[Symbol.iterator](); // –ü–æ–ª—É—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏

const arr3 = [];
let result3 = iterator.next();
while (!result3.done) {
	arr.push(result3.value); // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –º–∞—Å—Å–∏–≤
	result3 = iterator.next(); // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª
}

// –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –ø–µ—Ä–µ–±–æ—Ä –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã
// –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç (ES6+) –¥–ª—è –ª–µ–Ω–∏–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏.
// for..of, Spread, Rest, Array.from(), –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, Promise.All/Promice.race, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã function*, –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Map, Set, WeakMap

// –ú–µ—Ç–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã
// –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å –ø–æ–ª–Ω—ã–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –≤ –ø–∞–º—è—Ç–∏.
// –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ü–∏–∫–ª—ã, Array.prototype.forEach, Object.keys/Object.values, —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤ map filter reduce
