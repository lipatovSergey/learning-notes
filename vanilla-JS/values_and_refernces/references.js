// Примитивные значения (числа, строки, будевые значения, null, undefined, символы) копируются по значению.
let a = 5;
let b = a;
b = 10;
console.log(a); // 5
console.log(b); // 10
// Когда мы присвоили b значение переменной a, то создалась копия этого значения. Поэтопу при присвоении нового значения для b никак, не отразиться на a.
// Примитивы не изменяемы, то есть методы примитивов всегда возвращают копии.
let str = "hello";
let upperStr = str.toUpperCase();
console.log(str); // hello
console.log(upperStr); // HELLO
// Когда мы вызываем метод примитива создаётся временная обёртка.
// 1.JS оборачивает примитив в соответствующий объект обёртку(String, Number, Boolean), чтобы получить доступ к методам.
// 2.Метод работает с временным объектом-обёрткой и возвращает новое значение.
// 3.Поле выполнения метода обёртка удаляется. А изначальный примитив остаётся неизменным.

let arr = ["a", "b"];
let arr1 = arr.slice(1);
console.log(arr);
console.log(arr1);

// Объекты в JS имеют ссылочный тип данных.
let person = {
	name: "John",
	lastname: "Doe",
};
// При присвоении значения однной переменной содержащей объект, другой переменной создаёт ссылку на этот объект. Поэтому изменение значения свойства в одной из переменных изменит объект на который ссылаються все переменные. А значит значение изменится для всех переменных.
let person1 = person;
person1.name = "Tom";
console.log(person.name); // Tom
console.log(person1.name); // Tom
