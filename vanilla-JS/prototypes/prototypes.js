// Прототипы
// Протитип можно расматривать, как связь между двумя или более объектами. Связывание происходит при создании объекта с уже существующим объектом. Серия объектов связанных через прототипы называется цепочкой прототипов.
// Предположим у нас есть объект B он является протоитипом объекта A. Цель такого связывания(прототипирования) в том, чтобы обращение к свойству/методу объекта B, отсутствующему в объекте B, делегировалось на объект А. Например:
const objectA = {
	topic: "js",
};
const objectB = Object.create(objectA);
objectB.topic; // js
// При вызове objectB.topic, topic сначала будет искаться в objectB так, как такого свойства у него нет, topic будет искаться к объекте objectA прототипом которого явдяется objectB

// Связывание объектов при помощи служебного метода Object.create()
// Первый аргумент передаваемый в create() задаёт объект с которым должен быть связан вновь создоваемый объект.

// Затемнение
// Делегирование по прототипной цепочке работает только для чтения свойств. При записи свойства всегда создаються или обноаляються непосредственно в том объекте к которому примяняеться присваивание. Если у объекта есть свойство которое у него пытаються вызвать, то оно и будет вызванно. Поиск н пойдёт дальше по цепочке Пример:
const A = {
	topic: "Math",
};
const B = Object.create(A);
B.topic; // Math
B.topic = "English";
// Топик для B перезаписался на English
// Естественно если у B есть topic то он будет найден в B а в A он искаться не будет.
B.topic; // English
// В A topic всё ещё Math
A.topic; // Math

// Object.create(null)
// Это способ создать объект не имеющий прототип вообще. Тоесть он даже не будет прототим глобального Object, он вообще не будет исеть никакой прототипной связи.
// Это может быть полезно например если нам нужно создать объект словарь для хранения пар ключ и значение. Это поможет избежать возможных конфликтов с унаследованными свойствами Object.prototype
